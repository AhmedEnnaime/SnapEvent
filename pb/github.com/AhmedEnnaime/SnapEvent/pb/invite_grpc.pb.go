// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: invite.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InviteServiceClient is the client API for InviteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InviteServiceClient interface {
	GetInvites(ctx context.Context, in *GetInvitesRequest, opts ...grpc.CallOption) (InviteService_GetInvitesClient, error)
	GetInviteById(ctx context.Context, in *GetInviteId, opts ...grpc.CallOption) (*InviteResponse, error)
	CreateInvite(ctx context.Context, in *CreateIviteRequest, opts ...grpc.CallOption) (*InviteResponse, error)
	UpdateInvite(ctx context.Context, in *UpdateInviteRequest, opts ...grpc.CallOption) (*InviteResponse, error)
	DeleteInvite(ctx context.Context, in *GetInviteId, opts ...grpc.CallOption) (*DeleteInviteResponse, error)
}

type inviteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInviteServiceClient(cc grpc.ClientConnInterface) InviteServiceClient {
	return &inviteServiceClient{cc}
}

func (c *inviteServiceClient) GetInvites(ctx context.Context, in *GetInvitesRequest, opts ...grpc.CallOption) (InviteService_GetInvitesClient, error) {
	stream, err := c.cc.NewStream(ctx, &InviteService_ServiceDesc.Streams[0], "/pb.InviteService/GetInvites", opts...)
	if err != nil {
		return nil, err
	}
	x := &inviteServiceGetInvitesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type InviteService_GetInvitesClient interface {
	Recv() (*Invite, error)
	grpc.ClientStream
}

type inviteServiceGetInvitesClient struct {
	grpc.ClientStream
}

func (x *inviteServiceGetInvitesClient) Recv() (*Invite, error) {
	m := new(Invite)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *inviteServiceClient) GetInviteById(ctx context.Context, in *GetInviteId, opts ...grpc.CallOption) (*InviteResponse, error) {
	out := new(InviteResponse)
	err := c.cc.Invoke(ctx, "/pb.InviteService/GetInviteById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inviteServiceClient) CreateInvite(ctx context.Context, in *CreateIviteRequest, opts ...grpc.CallOption) (*InviteResponse, error) {
	out := new(InviteResponse)
	err := c.cc.Invoke(ctx, "/pb.InviteService/CreateInvite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inviteServiceClient) UpdateInvite(ctx context.Context, in *UpdateInviteRequest, opts ...grpc.CallOption) (*InviteResponse, error) {
	out := new(InviteResponse)
	err := c.cc.Invoke(ctx, "/pb.InviteService/UpdateInvite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inviteServiceClient) DeleteInvite(ctx context.Context, in *GetInviteId, opts ...grpc.CallOption) (*DeleteInviteResponse, error) {
	out := new(DeleteInviteResponse)
	err := c.cc.Invoke(ctx, "/pb.InviteService/DeleteInvite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InviteServiceServer is the server API for InviteService service.
// All implementations must embed UnimplementedInviteServiceServer
// for forward compatibility
type InviteServiceServer interface {
	GetInvites(*GetInvitesRequest, InviteService_GetInvitesServer) error
	GetInviteById(context.Context, *GetInviteId) (*InviteResponse, error)
	CreateInvite(context.Context, *CreateIviteRequest) (*InviteResponse, error)
	UpdateInvite(context.Context, *UpdateInviteRequest) (*InviteResponse, error)
	DeleteInvite(context.Context, *GetInviteId) (*DeleteInviteResponse, error)
	mustEmbedUnimplementedInviteServiceServer()
}

// UnimplementedInviteServiceServer must be embedded to have forward compatible implementations.
type UnimplementedInviteServiceServer struct {
}

func (UnimplementedInviteServiceServer) GetInvites(*GetInvitesRequest, InviteService_GetInvitesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetInvites not implemented")
}
func (UnimplementedInviteServiceServer) GetInviteById(context.Context, *GetInviteId) (*InviteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInviteById not implemented")
}
func (UnimplementedInviteServiceServer) CreateInvite(context.Context, *CreateIviteRequest) (*InviteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInvite not implemented")
}
func (UnimplementedInviteServiceServer) UpdateInvite(context.Context, *UpdateInviteRequest) (*InviteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInvite not implemented")
}
func (UnimplementedInviteServiceServer) DeleteInvite(context.Context, *GetInviteId) (*DeleteInviteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInvite not implemented")
}
func (UnimplementedInviteServiceServer) mustEmbedUnimplementedInviteServiceServer() {}

// UnsafeInviteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InviteServiceServer will
// result in compilation errors.
type UnsafeInviteServiceServer interface {
	mustEmbedUnimplementedInviteServiceServer()
}

func RegisterInviteServiceServer(s grpc.ServiceRegistrar, srv InviteServiceServer) {
	s.RegisterService(&InviteService_ServiceDesc, srv)
}

func _InviteService_GetInvites_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetInvitesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InviteServiceServer).GetInvites(m, &inviteServiceGetInvitesServer{stream})
}

type InviteService_GetInvitesServer interface {
	Send(*Invite) error
	grpc.ServerStream
}

type inviteServiceGetInvitesServer struct {
	grpc.ServerStream
}

func (x *inviteServiceGetInvitesServer) Send(m *Invite) error {
	return x.ServerStream.SendMsg(m)
}

func _InviteService_GetInviteById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInviteId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InviteServiceServer).GetInviteById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.InviteService/GetInviteById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InviteServiceServer).GetInviteById(ctx, req.(*GetInviteId))
	}
	return interceptor(ctx, in, info, handler)
}

func _InviteService_CreateInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InviteServiceServer).CreateInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.InviteService/CreateInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InviteServiceServer).CreateInvite(ctx, req.(*CreateIviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InviteService_UpdateInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InviteServiceServer).UpdateInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.InviteService/UpdateInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InviteServiceServer).UpdateInvite(ctx, req.(*UpdateInviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InviteService_DeleteInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInviteId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InviteServiceServer).DeleteInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.InviteService/DeleteInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InviteServiceServer).DeleteInvite(ctx, req.(*GetInviteId))
	}
	return interceptor(ctx, in, info, handler)
}

// InviteService_ServiceDesc is the grpc.ServiceDesc for InviteService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InviteService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.InviteService",
	HandlerType: (*InviteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInviteById",
			Handler:    _InviteService_GetInviteById_Handler,
		},
		{
			MethodName: "CreateInvite",
			Handler:    _InviteService_CreateInvite_Handler,
		},
		{
			MethodName: "UpdateInvite",
			Handler:    _InviteService_UpdateInvite_Handler,
		},
		{
			MethodName: "DeleteInvite",
			Handler:    _InviteService_DeleteInvite_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetInvites",
			Handler:       _InviteService_GetInvites_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "invite.proto",
}
